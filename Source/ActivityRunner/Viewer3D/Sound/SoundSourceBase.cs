// COPYRIGHT 2009, 2010, 2011, 2012, 2013, 2014, 2015 by the Open Rails project.
// 
// This file is part of Open Rails.
// 
// Open Rails is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Open Rails is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Open Rails.  If not, see <http://www.gnu.org/licenses/>.

// This file is the responsibility of the 3D & Environment Team. 

// ORTS SOUND SYSTEM
// 
// Sounds are generated by SoundSource objects.   All sound-making items, ie scenery, railcars, etc 
// create a SoundSource object, passing it the MSTS SMS file that specifies the sound.
// SoundSource objects
//  - have a physical location in the world, 
//  - may be attached to a railcar in which case it moves with the car
//  - railcar-attached sounds can poll control variables in the simulator
//  - have one or more SoundStreams
//  SoundStreams
//  - can play only one sound at a time
//  - the sound played is controlled by the various triggers
//  SoundTriggers
//  - defined in the SMS file
//  - triggered by various events
//  - when triggered, executes a SoundCommand
//  SoundCommands
//  - used by triggers to control the SoundStream
//  - ie play a sound, stop a sound etc

using System;

using Orts.ActivityRunner.Viewer3D.RollingStock;
using Orts.Simulation.RollingStocks;

namespace Orts.ActivityRunner.Viewer3D.Sound
{
    /////////////////////////////////////////////////////////
    // SOUND SOURCE
    /////////////////////////////////////////////////////////

    /// <summary>
    /// Represents an sms file,
    /// may have a physical location in the world,
    /// may be attached to a railcar in which case it moves with the car,
    /// owns one or more SoundStreams
    /// </summary>
    public abstract class SoundSourceBase : IDisposable
    {
        public abstract void InitInitials();
        public abstract void Uninitialize();
        public abstract bool Update();

        /// <summary>
        /// The sound may be from a train car
        /// </summary>
        public MSTSWagon Car { get; set; }
        public TrainCarViewer TrainCar { get; }

        private protected static readonly Viewer viewer = Program.Viewer;
        /// <summary>
        /// Volume of the ScalabiltyGroup
        /// </summary>
        public float Volume { get; set; } = 1;
        /// <summary>
        /// If needs active management or can be left to OpenAL to deal with sound properties
        /// </summary>
        public bool NeedsFrequentUpdate { get; protected set; }
        private bool disposedValue;

        protected SoundSourceBase()
        {
        }

        protected SoundSourceBase(TrainCarViewer trainCar)
        {
            TrainCar = trainCar ?? throw new ArgumentNullException(nameof(trainCar));
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    // TODO: dispose managed state (managed objects)
                }

                disposedValue = true;
            }
        }

        public void Dispose()
        {
            // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }
    }
}

