// COPYRIGHT 2009, 2010, 2011, 2012, 2013, 2014, 2015 by the Open Rails project.
// 
// This file is part of Open Rails.
// 
// Open Rails is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Open Rails is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Open Rails.  If not, see <http://www.gnu.org/licenses/>.

// This file is the responsibility of the 3D & Environment Team. 

// ORTS SOUND SYSTEM
// 
// Sounds are generated by SoundSource objects.   All sound-making items, ie scenery, railcars, etc 
// create a SoundSource object, passing it the MSTS SMS file that specifies the sound.
// SoundSource objects
//  - have a physical location in the world, 
//  - may be attached to a railcar in which case it moves with the car
//  - railcar-attached sounds can poll control variables in the simulator
//  - have one or more SoundStreams
//  SoundStreams
//  - can play only one sound at a time
//  - the sound played is controlled by the various triggers
//  SoundTriggers
//  - defined in the SMS file
//  - triggered by various events
//  - when triggered, executes a SoundCommand
//  SoundCommands
//  - used by triggers to control the SoundStream
//  - ie play a sound, stop a sound etc

using System.Collections.Generic;
using System.Diagnostics;
using System.IO;

using FreeTrainSimulator.Common;
using FreeTrainSimulator.Common.Calc;

using Orts.Formats.Msts;
using Orts.Formats.Msts.Files;
using Orts.Formats.Msts.Models;
using Orts.Simulation;
using Orts.Simulation.RollingStocks;

namespace Orts.ActivityRunner.Viewer3D.Sound
{

    /// <summary>
    /// Utility class to avoid loading multiple copies of the same file.
    /// </summary>
    public static class SharedSMSFileManager
    {
        private static readonly Dictionary<string, SoundManagmentFile> sharedSMSFiles = new Dictionary<string, SoundManagmentFile>();

        public static int SwitchSmsNumber { get; private set; }
        public static int CurveSmsNumber { get; private set; }
        public static int CurveSwitchSmsNumber { get; private set; }
        public static bool AutoTrackSound { get; private set; }

        public static SoundManagmentFile Get(string path)
        {
            if (!sharedSMSFiles.TryGetValue(path, out SoundManagmentFile value))
            {
                SoundManagmentFile smsFile = new SoundManagmentFile(path);
                value = smsFile;
                sharedSMSFiles.Add(path, value);
            }
            return value;
        }

        public static void Initialize(int trackTypesNumber)
        {
            if (Simulator.Instance.RouteModel.Settings.TryGetValue("CurveSound", out string settingValue) &&
                int.TryParse(settingValue, out int curveSmsNumber))
                CurveSmsNumber = curveSmsNumber;

            if (Simulator.Instance.RouteModel.Settings.TryGetValue("CurveSwitchSound", out settingValue) &&
                int.TryParse(settingValue, out int curveSwitchSmsNumber))
                CurveSwitchSmsNumber = curveSwitchSmsNumber;

            if (Simulator.Instance.RouteModel.Settings.TryGetValue("SwitchSound", out settingValue) &&
                int.TryParse(settingValue, out int switchSmsNumber))
                SwitchSmsNumber = switchSmsNumber;

            if (SwitchSmsNumber < -1 || SwitchSmsNumber >= trackTypesNumber)
            {
                SwitchSmsNumber = -1;
                Trace.TraceInformation("Switch SMS Number out of range");
            }
            if (SwitchSmsNumber != -1)
                AutoTrackSound = true;

            if (CurveSmsNumber < -1 || CurveSmsNumber >= trackTypesNumber)
            {
                CurveSmsNumber = -1;
                Trace.TraceInformation("Curve SMS Number out of range");
            }
            if (CurveSmsNumber != -1)
                AutoTrackSound = true;

            if (CurveSwitchSmsNumber < -1 || CurveSwitchSmsNumber >= trackTypesNumber)
            {
                CurveSwitchSmsNumber = CurveSmsNumber;
                Trace.TraceInformation("CurveSwitch SMS Number out of range, replaced with curve SMS number");
            }
            if (CurveSwitchSmsNumber != -1)
                AutoTrackSound = true;
        }
    }

    public class ORTSActSoundSources
    {
        public ORTSActSoundSources()
        {
        }

        public void Update()
        {
            if (Simulator.Instance.ActivityRun == null || Simulator.Instance.ActivityRun.TriggeredActivityEvent == null ||
                Simulator.Instance.ActivityRun.TriggeredActivityEvent.ActivityEvent.SoundFile == null && (Simulator.Instance.ActivityRun.TriggeredActivityEvent.ActivityEvent.Outcomes == null
                || Simulator.Instance.ActivityRun.TriggeredActivityEvent.ActivityEvent.Outcomes.ActivitySound == null))
                return;
            var localEventID = Simulator.Instance.ActivityRun.TriggeredActivityEvent.ActivityEvent.ID;
            string ORTSActSoundFile;
            OrtsActivitySoundFileType ORTSActSoundFileType;
            ActivitySound activitySound = null;
            if (Simulator.Instance.ActivityRun.TriggeredActivityEvent.ActivityEvent.Outcomes == null
                || Simulator.Instance.ActivityRun.TriggeredActivityEvent.ActivityEvent.Outcomes.ActivitySound == null)
            {
                ORTSActSoundFile = Simulator.Instance.ActivityRun.TriggeredActivityEvent.ActivityEvent.SoundFile;
                ORTSActSoundFileType = Simulator.Instance.ActivityRun.TriggeredActivityEvent.ActivityEvent.SoundFileType;
            }
            else
            {
                activitySound = Simulator.Instance.ActivityRun.TriggeredActivityEvent.ActivityEvent.Outcomes.ActivitySound;
                ORTSActSoundFile = activitySound.SoundFile;
                ORTSActSoundFileType = activitySound.SoundFileType;
            }
            var train = Simulator.Instance.ActivityRun.TriggeredActivityEvent.Train;
            Simulator.Instance.ActivityRun.TriggeredActivityEvent = null;
            var extension = Path.GetExtension(ORTSActSoundFile);
            SoundSource ActivitySounds;
            switch (extension)
            {
                case ".sms":
                    switch (ORTSActSoundFileType)
                    {
                        case OrtsActivitySoundFileType.Everywhere:
                            ActivitySounds = new SoundSource(SoundEventSource.InGame, ORTSActSoundFile, true);
                            Program.Viewer.SoundProcess.AddSoundSource(localEventID, ActivitySounds);
                            break;
                        case OrtsActivitySoundFileType.Cab:
                            var playerLoco = (MSTSWagon)Program.Viewer.Simulator.PlayerLocomotive;
                            ActivitySounds = new SoundSource(playerLoco, Program.Viewer.World.Trains.GetViewer(playerLoco), ORTSActSoundFile);
                            Program.Viewer.SoundProcess.AddSoundSource(localEventID, ActivitySounds);
                            break;
                        case OrtsActivitySoundFileType.Pass:
                            if (Program.Viewer.Camera.Style == CameraStyle.Passenger && Program.Viewer.Camera.AttachedCar != null)
                            {
                                var selectedWagon = (MSTSWagon)Program.Viewer.Camera.AttachedCar;
                                ActivitySounds = new SoundSource(selectedWagon, Program.Viewer.World.Trains.GetViewer(selectedWagon), ORTSActSoundFile);
                                Program.Viewer.SoundProcess.AddSoundSource(localEventID, ActivitySounds);
                            }
                            break;
                        case OrtsActivitySoundFileType.Ground:
                            var loco = train == Program.Viewer.Simulator.PlayerLocomotive.Train ?
                                Program.Viewer.Simulator.PlayerLocomotive : train.Cars[0];
                            //                            string wsName = Program.Viewer.Simulator.RoutePath + @"\WORLD\" + WorldFile.WorldFileNameFromTileCoordinates(worldLocation.TileX, worldLocation.TileZ) + "s";
                            ActivitySounds = new SoundSource(loco.WorldPosition.WorldLocation.ChangeElevation(3.0f), SoundEventSource.None, ORTSActSoundFile, true);
                            Program.Viewer.SoundProcess.AddSoundSource(localEventID, ActivitySounds);
                            break;
                        case OrtsActivitySoundFileType.Location:
                            ActivitySounds = new SoundSource(activitySound.Location.ChangeElevation(3.0f), SoundEventSource.None, ORTSActSoundFile, true);
                            Program.Viewer.SoundProcess.AddSoundSource(localEventID, ActivitySounds);
                            break;
                        default:
                            break;
                    }
                    break;
                case ".wav":
                    switch (ORTSActSoundFileType)
                    {
                        case OrtsActivitySoundFileType.Everywhere:
                            ActivitySounds = new SoundSource(ORTSActSoundFile, ORTSActSoundFileType, true);
                            Program.Viewer.SoundProcess.AddSoundSource(localEventID, ActivitySounds);
                            break;
                        case OrtsActivitySoundFileType.Cab:
                            var playerLoco = (MSTSWagon)Program.Viewer.Simulator.PlayerLocomotive;
                            ActivitySounds = new SoundSource(playerLoco, ORTSActSoundFile, ORTSActSoundFileType);
                            Program.Viewer.SoundProcess.AddSoundSource(localEventID, ActivitySounds);
                            break;
                        case OrtsActivitySoundFileType.Pass:
                            if (Program.Viewer.Camera.Style == CameraStyle.Passenger && Program.Viewer.Camera.AttachedCar != null)
                            {
                                var selectedWagon = (MSTSWagon)Program.Viewer.Camera.AttachedCar;
                                ActivitySounds = new SoundSource(selectedWagon, ORTSActSoundFile, ORTSActSoundFileType);
                                Program.Viewer.SoundProcess.AddSoundSource(localEventID, ActivitySounds);
                            }
                            break;
                        case OrtsActivitySoundFileType.Ground:
                            var loco = train == Program.Viewer.Simulator.PlayerLocomotive.Train ?
                                Program.Viewer.Simulator.PlayerLocomotive : train.Cars[0];
                            //                           string wsName = Program.Viewer.Simulator.RoutePath + @"\WORLD\" + WorldFile.WorldFileNameFromTileCoordinates(worldLocation.TileX, worldLocation.TileZ) + "s";
                            ActivitySounds = new SoundSource(loco.WorldPosition.WorldLocation.ChangeElevation(3.0f), ORTSActSoundFile, true, ORTSActSoundFileType);// Sound does not come from earth!
                            Program.Viewer.SoundProcess.AddSoundSource(localEventID, ActivitySounds);
                            break;
                        case OrtsActivitySoundFileType.Location:
                            ActivitySounds = new SoundSource(activitySound.Location.ChangeElevation(3.0f), ORTSActSoundFile, true, ORTSActSoundFileType);// Sound does not come from earth!
                            Program.Viewer.SoundProcess.AddSoundSource(localEventID, ActivitySounds);
                            break;
                        default:
                            break;
                    }
                    break;
                default:
                    break;
            }
            return;
        }
    }
}

