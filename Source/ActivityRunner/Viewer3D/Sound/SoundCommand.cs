// COPYRIGHT 2009, 2010, 2011, 2012, 2013, 2014, 2015 by the Open Rails project.
// 
// This file is part of Open Rails.
// 
// Open Rails is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Open Rails is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Open Rails.  If not, see <http://www.gnu.org/licenses/>.

// This file is the responsibility of the 3D & Environment Team. 

// ORTS SOUND SYSTEM
// 
// Sounds are generated by SoundSource objects.   All sound-making items, ie scenery, railcars, etc 
// create a SoundSource object, passing it the MSTS SMS file that specifies the sound.
// SoundSource objects
//  - have a physical location in the world, 
//  - may be attached to a railcar in which case it moves with the car
//  - railcar-attached sounds can poll control variables in the simulator
//  - have one or more SoundStreams
//  SoundStreams
//  - can play only one sound at a time
//  - the sound played is controlled by the various triggers
//  SoundTriggers
//  - defined in the SMS file
//  - triggered by various events
//  - when triggered, executes a SoundCommand
//  SoundCommands
//  - used by triggers to control the SoundStream
//  - ie play a sound, stop a sound etc

using System;
using System.Collections.Generic;
using System.Collections.Immutable;

using FreeTrainSimulator.Common.Calc;

using Orts.Formats.Msts;
using Orts.Formats.Msts.Models;
using Orts.Simulation;

namespace Orts.ActivityRunner.Viewer3D.Sound
{
    /// <summary>
    /// A base class for all sound commands
    /// Defines that they all have a stream and a 'Run()' function
    /// </summary>
    public abstract class ORTSSoundCommand
    {
        /// <summary>
        /// The Stream in .sms file it belongs to
        /// </summary>
        protected SoundStream ORTSStream;

        protected ORTSSoundCommand(SoundStream ortsStream)
        {
            ORTSStream = ortsStream;
        }

        /// <summary>
        /// Put the command into stream's queue, or set its volume, or enable/disable other commands
        /// </summary>
        public abstract void Run();


        /// <summary>
        /// Create a sound command based on the sound command variable of a trigger in an SMS file.
        /// </summary>
        /// <param name="mstsSoundCommand"></param>
        /// <param name="soundStream"></param>
        /// <returns></returns>
        public static ORTSSoundCommand FromMSTS(SoundCommand mstsSoundCommand, SoundStream soundStream)
        {
            if (mstsSoundCommand == null)
            {
                return new ORTSNoOp();
            }
            else if (mstsSoundCommand is SoundPlayCommand playCommand)
            {
                switch (playCommand.CommandType)
                {
                    case SoundPlayCommand.SoundCommandType.PlayOneShot:
                        return new ORTSPlayOneShot(soundStream, playCommand);
                    case SoundPlayCommand.SoundCommandType.StartLoop:
                        return new ORTSStartLoop(soundStream, playCommand);
                    case SoundPlayCommand.SoundCommandType.StartLoopRelease:
                        return new ORTSStartLoopRelease(soundStream, playCommand);
                }
            }
            else if (mstsSoundCommand is LoopRelease releaseCommand)
            {
                switch (releaseCommand.ReleaseMode)
                {
                    case LoopRelease.ReleaseType.Release:
                        return new ORTSReleaseLoopRelease(soundStream);
                    case LoopRelease.ReleaseType.ReleaseWithJump:
                        return new ORTSReleaseLoopReleaseWithJump(soundStream);
                }
            }
            else if (mstsSoundCommand is StreamVolumeCommand)
            {
                return new ORTSSetStreamVolume(soundStream, (StreamVolumeCommand)mstsSoundCommand);
            }
            else if (mstsSoundCommand is TriggerCommand triggerCommand)
            {
                switch (triggerCommand.Trigger)
                {
                    case TriggerCommand.TriggerType.Disable:
                        return new ORTSDisableTrigger(soundStream, triggerCommand);
                    case TriggerCommand.TriggerType.Enable:
                        return new ORTSEnableTrigger(soundStream, triggerCommand);
                }
            }
            throw new ArgumentException("Unexpected soundCommand type " + mstsSoundCommand.GetType().ToString() + " in " + soundStream.SoundSource.SMSFolder, nameof(mstsSoundCommand));
        }


        /// <summary>
        /// Create a pre-compiled sound command for activity files.
        /// </summary>
        /// <param name="wavFilePath"></param>
        /// <param name="soundStream"></param>
        /// <returns></returns>
        public static ORTSSoundCommand Precompiled(string wavFileName, SoundStream soundStream)
        {
            return new ORTSPlayOneShot(soundStream, wavFileName);
        }

    }// ORTSSoundCommand

    /////////////////////////////////////////////////////////
    // SOUND COMMANDS
    /////////////////////////////////////////////////////////


    /// <summary>
    /// Start playing the whole sound stream once, then stop
    /// </summary>
    public class ORTSPlayOneShot : ORTSSoundPlayCommand
    {
        public ORTSPlayOneShot(SoundStream ortsStream, SoundPlayCommand mstsSoundPlayCommand)
            : base(ortsStream, mstsSoundPlayCommand)
        {
        }
        // precompiled version for activity sounds
        public ORTSPlayOneShot(SoundStream ortsStream, string wavFileName)
            : base(ortsStream, wavFileName)
        {
        }

        public override void Run()
        {
            string p = GetNextFile();
            if (!string.IsNullOrEmpty(p))
            {
                if (ORTSStream != null && ORTSStream.ALSoundSource != null)
                    ORTSStream.ALSoundSource.Queue(p, PlayMode.OneShot, ORTSStream.SoundSource.ExternalSource, ORTSStream.RepeatedTrigger);
            }
        }
    }

    /// <summary>
    /// Start looping the whole stream, release it only at the end
    /// </summary>
    public class ORTSStartLoop : ORTSSoundPlayCommand
    {
        public ORTSStartLoop(SoundStream ortsStream, SoundPlayCommand mstsSoundPlayCommand)
            : base(ortsStream, mstsSoundPlayCommand)
        {
        }
        public override void Run()
        {
            // Support for Loop functions - by GeorgeS
            string p = GetNextFile();
            if (!string.IsNullOrEmpty(p))
            {
                if (ORTSStream != null && ORTSStream.ALSoundSource != null)
                    ORTSStream.ALSoundSource.Queue(p, PlayMode.Loop, ORTSStream.SoundSource.ExternalSource, false);
            }
        }
    }

    /// <summary>
    /// Release the sound by playing the looped sustain part till its end, then play the last part
    /// </summary>
    public class ORTSReleaseLoopRelease : ORTSSoundCommand
    {
        public ORTSReleaseLoopRelease(SoundStream ortsStream)
            : base(ortsStream)
        {
        }

        public override void Run()
        {
            if (ORTSStream != null && ORTSStream.ALSoundSource != null)
                ORTSStream.ALSoundSource.Queue("", PlayMode.Release, ORTSStream.SoundSource.ExternalSource, false);
        }
    }

    /// <summary>
    /// Start by playing the first part, then start looping the sustain part of the stream
    /// </summary>
    public class ORTSStartLoopRelease : ORTSSoundPlayCommand
    {
        public ORTSStartLoopRelease(SoundStream ortsStream, SoundPlayCommand mstsStartLoopRelease)
            : base(ortsStream, mstsStartLoopRelease)
        {
        }

        // Support for Loop functions - by GeorgeS
        public override void Run()
        {
            string p = GetNextFile();
            if (!string.IsNullOrEmpty(p))
            {
                if (ORTSStream != null && ORTSStream.ALSoundSource != null)
                    ORTSStream.ALSoundSource.Queue(p, PlayMode.LoopRelease, ORTSStream.SoundSource.ExternalSource, ORTSStream.IsReleasedWithJump);
            }
        }
    }

    /// <summary>
    /// Release the sound by playing the looped sustain part till the next cue point, then jump to the last part and play that  
    /// </summary>
    public class ORTSReleaseLoopReleaseWithJump : ORTSSoundCommand
    {
        public ORTSReleaseLoopReleaseWithJump(SoundStream ortsStream)
            : base(ortsStream)
        {
        }

        public override void Run()
        {
            if (ORTSStream != null && ORTSStream.ALSoundSource != null)
                ORTSStream.ALSoundSource.Queue("", PlayMode.ReleaseWithJump, ORTSStream.SoundSource.ExternalSource, true);
        }
    }

    /// <summary>
    /// Shut down this stream trigger 
    /// </summary>
    public class ORTSDisableTrigger : ORTSSoundCommand
    {
        private int TriggerIndex;  // index into the stream's trigger list 

        public ORTSDisableTrigger(SoundStream ortsStream, TriggerCommand smsData)
            : base(ortsStream)
        {
            TriggerIndex = smsData.TriggerId - 1;
        }

        public override void Run()
        {
            if (TriggerIndex >= 0 && TriggerIndex < ORTSStream.Triggers.Length)
                ORTSStream.Triggers[TriggerIndex].Enabled = false;
        }
    }

    /// <summary>
    /// Re-enable this stream trigger
    /// </summary>
    public class ORTSEnableTrigger : ORTSSoundCommand
    {
        private int TriggerIndex;

        public ORTSEnableTrigger(SoundStream ortsStream, TriggerCommand smsData)
            : base(ortsStream)
        {
            TriggerIndex = smsData.TriggerId - 1;
        }

        public override void Run()
        {
            if (TriggerIndex >= 0 && TriggerIndex < ORTSStream.Triggers.Length)
                ORTSStream.Triggers[TriggerIndex].Enabled = true;
        }
    }

    /// <summary>
    /// Set Volume of Stream
    /// </summary>
    public class ORTSSetStreamVolume : ORTSSoundCommand
    {
        private float Volume;

        public ORTSSetStreamVolume(SoundStream ortsStream, StreamVolumeCommand smsData)
            : base(ortsStream)
        {
            Volume = smsData.Volume;
        }

        public override void Run()
        {
            ORTSStream.Volume = Volume;
        }
    }

    /// <summary>
    /// Used when the SMS file sound command is missing or malformed
    /// </summary>
    public class ORTSNoOp : ORTSSoundCommand
    {
        public ORTSNoOp()
            : base(null)
        {
        }
        public override void Run()
        {
        }
    }

    /// <summary>
    /// A base class for commands that play a sound.
    /// Provides for selecting the sound from multiple files
    /// using a random or sequential selection strategy.
    /// </summary>
    public abstract class ORTSSoundPlayCommand : ORTSSoundCommand
    {
        /// <summary>
        /// File names to select from for playing
        /// </summary>
        public IList<string> Files { get; private set; }
        /// <summary>
        /// How to select from available files
        /// </summary>
        private readonly SoundPlayCommand.Selection selectionMethod;
        /// <summary>
        /// Index of the file to play inside <see cref="Files"/> vector
        /// </summary>
        private int fileIndex;

        protected ORTSSoundPlayCommand(SoundStream ortsStream, SoundPlayCommand mstsSoundPlayCommand)
            : base(ortsStream)
        {
            Files = mstsSoundPlayCommand?.Files;
            selectionMethod = mstsSoundPlayCommand.SelectionMethod;
        }

        // precompiled version for activity sounds
        protected ORTSSoundPlayCommand(SoundStream ortsStream, string wavFileName)
            : base(ortsStream)
        {
            Files = new List<string>() { wavFileName };
            selectionMethod = SoundPlayCommand.Selection.Sequential;
        }

        /// <summary>
        /// Select a file from the Files list using the SelectionMethod
        /// </summary>
        /// <returns>File name with full path </returns>
        protected string GetNextFile()
        {
            if (selectionMethod == SoundPlayCommand.Selection.Sequential)
            {
                ++fileIndex;
                if (fileIndex >= Files.Count)
                    fileIndex = 0;
            }
            else if (selectionMethod == SoundPlayCommand.Selection.Random)
            {
                fileIndex = StaticRandom.Next(Files.Count);
            }

            ImmutableArray<string> pathArray = ImmutableArray.Create(
                Simulator.Instance.RouteFolder.SoundFolder,
                ORTSStream.SoundSource.SMSFolder,
                Simulator.Instance.RouteFolder.ContentFolder.SoundFolder);
            return FolderStructure.FindFileFromFolders(pathArray, Files[fileIndex]) ?? string.Empty;
        }
    }


}

