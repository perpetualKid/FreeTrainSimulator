# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
  branches:
    include:
    - '*' 
  paths:
    exclude: # file paths which will not trigger a build
    - Build/*
    - README.md
    - SUPPORT.md
    - CONTRIBUTING.md

pool:
  vmImage: 'windows-latest'

variables:
  solution: 'Source/Orts.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release' #changes to Debug below if this is a prerelease version 

steps:
- task: NuGetToolInstaller@1
  displayName: Installing Nuget tools

- task: NuGetCommand@2
  displayName: Restore Nuget Packages for Solution
  inputs:
    restoreSolution: '$(solution)'

- task: DotNetCoreCLI@2
  displayName: Restore dotnet tools
  inputs:
    command: custom
    custom: tool
    arguments: 'restore --tool-manifest .\.config\dotnet-tools.json'
    workingDirectory: .\source

#need to run in the correct folder as version.json is not in root
#- script: dotnet tool run nbgv cloud -a
#  workingDirectory: .\source
#  displayName: Set NBGV Variables

- task: DotNetCoreCLI@2
  displayName: Set NBGV Variables
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'run nbgv cloud -a'
    workingDirectory: '.\source'

- task: Bash@3
  displayName: List all Environment Variables
  inputs:
    targetType: 'inline'
    script: 'env | sort'

- task: PowerShell@2
  displayName: Set build configuration
  inputs:
    targetType: 'inline'
    script: |
      if ($env:NBGV_PUBLICRELEASE -eq $false) {
        Write-Host '##vso[task.setvariable variable=buildConfiguration]Debug'}

- task: MSBuild@1
  displayName: Building the solution
  inputs:
    solution: '$(solution)'
    msbuildArchitecture: 'x64'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  condition: ne(variables['Build.SourceBranch'], 'refs/heads/main')
  displayName: Testing the solution
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\*test.*.dll
      **\*tests.*.dll
      !**\*TestAdapter.dll
      !**\*TestPlatform*
      !**\*testhost*
      !**\obj\**
    otherConsoleOptions: '/platform:x64'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    runInParallel: true

- task: CmdLine@2
  displayName: Collecting language files
  inputs:
    script: |
      call ./Source/Locales/Collect-Languages.bat 

- task: PublishPipelineArtifact@1
  displayName: Publishing build artifacts
  inputs:
    targetPath: './Program/'
    publishLocation: 'pipeline'

- task: NuGetCommand@2
  displayName: Packaging to Nuget Package
  inputs:
    command: 'pack'
    packagesToPack: 'source/ORTS-MG-Package.nuspec'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'NBGV_NUGETPACKAGEVERSION'

- task: PowerShell@2
  env:
    connectionstring: $(feedconnection)
  displayName: Uploading the package to a feed
  condition: and(succeeded(), xor(eq(variables['Build.SourceBranch'], 'refs/heads/main'), and(ne(variables['NBGV_PRERELEASEVERSION'], ''), or(eq(variables['NBGV_PUBLICRELEASE'], 'true'), eq(variables['Build.SourceBranch'], 'refs/heads/development')))))
  inputs:
    targetType: 'inline'
    script: |
      $feed = 'releases'
      if ($env:Build.Reason -eq 'PullRequest' -or $env:Build.Reason -eq 'Manual' -or $env:NBGV_PUBLICRELEASE -eq $false) {
        $feed='builds'}
      dotnet tool install --tool-manifest .\source\.config\dotnet-tools.json sleet
      cd .\source
      dotnet tool restore
      dotnet tool run sleet push .\..\..\a --config none -p SLEET_FEED_TYPE=azure -p SLEET_FEED_CONTAINER=$feed -p SLEET_FEED_CONNECTIONSTRING=${env:connectionstring}
